name: Run E2E Tests
on: [push]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        mode: [nossl, ssl]
      fail-fast: false

    # Convenience vars shared by all steps
    env:
      RABBITMQ_HOST: localhost
      RABBITMQ_PORT: ${{ matrix.mode == 'ssl' && 5671 || 5672 }}

    steps:
    # 1 — code + Node
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v3
      with: { node-version: 18 }

    # 2 — SSL branch: generate certs **and** a rabbitmq.conf
    - name: Generate certs + config (SSL only)
      if: matrix.mode == 'ssl'
      run: |
        mkdir -p certs

        # ----  certificates  --------------------------------------------------
        openssl req -x509 -nodes -newkey rsa:4096 -days 1 \
          -keyout certs/ca.key    -out certs/ca.crt \
          -subj "/CN=Peanar-Test-CA"

        openssl req -nodes -newkey rsa:4096 \
          -keyout certs/server.key -out certs/server.csr \
          -subj "/CN=rabbitmq"
        openssl x509 -req -in certs/server.csr -CA certs/ca.crt -CAkey certs/ca.key \
          -CAcreateserial -days 1 -out certs/server.crt

        openssl req -nodes -newkey rsa:4096 \
          -keyout certs/client.key -out certs/client.csr \
          -subj "/CN=peanar-client"
        openssl x509 -req -in certs/client.csr -CA certs/ca.crt -CAkey certs/ca.key \
          -CAcreateserial -days 1 -out certs/client.crt

        # ----  RabbitMQ config  ----------------------------------------------
        cat > rabbitmq.conf <<'EOF'
        ## disable insecure listener
        listeners.tcp = none
        ## TLS listener
        listeners.ssl.default = 5671

        ssl_options.cacertfile  = /certs/ca.crt
        ssl_options.certfile    = /certs/server.crt
        ssl_options.keyfile     = /certs/server.key
        ssl_options.verify      = verify_none
        ssl_options.fail_if_no_peer_cert = false
        EOF

    # 3 — Start broker (mount config if SSL)
    - name: Start RabbitMQ
      run: |
        if [ "${{ matrix.mode }}" = "ssl" ]; then
          docker run -d --name rabbitmq \
            -p 5671:5671 -p 15672:15672 \
            -v "$PWD/certs:/certs:ro" \
            -v "$PWD/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro" \
            rabbitmq:3-management
        else
          docker run -d --name rabbitmq \
            -p 5672:5672 -p 15672:15672 \
            rabbitmq:3-management
        fi

    # 4 — Wait for health-check
    - name: Wait for broker
      run: |
        for i in {1..30}; do
          docker exec rabbitmq rabbitmq-diagnostics -q ping && exit 0
          sleep 2
        done
        docker logs rabbitmq
        exit 1

    # 5--- Install deps & run tests
    - run: npm ci
      name: Install dependencies

    - name: Run E2E tests
      run: npm run test:e2e
      env:
        # plain AMQP or TLS-protected AMQPS URL
        RABBITMQ_HOST: localhost
        RABBITMQ_PORT: ${{ matrix.mode == 'ssl' && 5671 || 5672 }}
        RABBITMQ_USE_SSL: ${{ matrix.mode == 'ssl' && 'true' || 'false' }}

        # expose cert paths only in SSL mode – let your test harness pick them up
        RABBITMQ_CA_PATH:          ${{ matrix.mode == 'ssl' && format('{0}/certs/ca.crt',    github.workspace) || '' }}
        RABBITMQ_CLIENT_KEY_PATH:  ${{ matrix.mode == 'ssl' && format('{0}/certs/client.key',github.workspace) || '' }}
        RABBITMQ_CLIENT_CERT_PATH: ${{ matrix.mode == 'ssl' && format('{0}/certs/client.crt',github.workspace) || '' }}
        RABBITMQ_SSL_VERIFY_PEER:  ${{ matrix.mode == 'ssl' && 'true' || 'false' }}
        RABBITMQ_SSL_FAIL_IF_NO_PEER_CERT: false
